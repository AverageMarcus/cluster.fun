apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx-ingress
  namespace: kube-system
  annotations:
    configmap.reloader.stakater.com/reload: ingress-nginx-configuration
    meta.helm.sh/release-name: kapsule-ingress
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/instance: nginx-lb
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    k8s.scw.cloud/ingress: nginx
    k8s.scw.cloud/object: DaemonSet
    k8s.scw.cloud/system: ingress
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --election-id=ingress-controller-leader-nginx
        - --controller-class=k8s.io/ingress-nginx
        - --configmap=$(POD_NAMESPACE)/ingress-nginx-configuration
        - --tcp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-tcp-services
        - --udp-services-configmap=$(POD_NAMESPACE)/ingress-nginx-udp-services
        - --annotations-prefix=nginx.ingress.kubernetes.io
        - --watch-ingress-without-class
        - --enable-metrics
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: STAKATER_INGRESS_NGINX_CONFIGURATION_CONFIGMAP
          value: da39a3ee5e6b4b0d3255bfef95601890afd80709
        image: k8s.gcr.io/ingress-nginx/controller:v1.0.0-beta.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        name: nginx-ingress-controller
        ports:
        - containerPort: 80
          hostPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          hostPort: 443
          name: https
          protocol: TCP
        - containerPort: 10254
          name: http-metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        resources: {}
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsUser: 101
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/nginx/lua/plugins/redirect_location
          name: plugins
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: nginx-ingress
      serviceAccountName: nginx-ingress
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: ingress-nginx-plugin-redirect-location
        name: plugins
  updateStrategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
