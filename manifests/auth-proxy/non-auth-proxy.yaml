apiVersion: v1
kind: ConfigMap
metadata:
  name: host-mappings
  namespace: auth-proxy
  labels:
    app: proxy
data:
  mapping.json: |
    {
      "tekton-el.auth-proxy.svc": "tekton-el.cluster.local",
      "home.auth-proxy.svc": "home.cluster.local",
      "home.cluster.fun": "home.cluster.local"
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  namespace: auth-proxy
  labels:
    app: proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: proxy
  template:
    metadata:
      labels:
        app: proxy
    spec:
      dnsPolicy: None
      dnsConfig:
        nameservers:
          - 100.100.100.100
      containers:
      - name: proxy
        image: docker.cluster.fun/averagemarcus/proxy:latest
        imagePullPolicy: Always
        env:
        - name: PROXY_DESTINATION
          value: talos.averagemarcus.github.beta.tailscale.net
        - name: PORT
          value: "8080"
        ports:
        - containerPort: 8080
          protocol: TCP
        volumeMounts:
        - name: host-mappings
          mountPath: /config/
      - name: tailscale
        image: ghcr.io/tailscale/tailscale:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: AUTH_KEY
          valueFrom:
            secretKeyRef:
              name: tailscale-auth
              key: password
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
        command:
        - sh
        - -c
        - |
          export PATH=$PATH:/tailscale/bin
          if [[ ! -d /dev/net ]]; then mkdir -p /dev/net; fi
          if [[ ! -c /dev/net/tun ]]; then mknod /dev/net/tun c 10 200; fi
          echo "Starting tailscaled"
          tailscaled --socket=/tmp/tailscaled.sock &
          PID=$!
          echo "Running tailscale up"
          tailscale --socket=/tmp/tailscaled.sock up \
            --accept-dns=true \
            --authkey=${AUTH_KEY} \
            --hostname=auth-proxy
          wait ${PID}
      volumes:
      - name: host-mappings
        configMap:
          name: host-mappings
---
apiVersion: v1
kind: Service
metadata:
  name: tekton-el
  namespace: auth-proxy
  labels:
    app: proxy
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: proxy
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: home
  namespace: auth-proxy
  labels:
    app: proxy
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: proxy
  type: ClusterIP
---


apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: non-auth-proxy
  namespace: auth-proxy
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - home.cluster.fun
    secretName: non-auth-proxy-ingress
  rules:
  - host: home.cluster.fun
    http:
      paths:
      - path: /
        pathType: ImplementationSpecific
        backend:
          service:
            name: home
            port:
              name: http
