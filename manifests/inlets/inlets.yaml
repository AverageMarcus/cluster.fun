apiVersion: v1
kind: Secret
metadata:
  name: inlets
  namespace: inlets
  annotations:
    kube-1password: podju6t2s2osc3vbkimyce25ti
    kube-1password/vault: Kubernetes
    kube-1password/password-key: token
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: inlets
  namespace: inlets
  labels:
    app: inlets
spec:
  type: ClusterIP
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8000
  selector:
    app: inlets
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inlets
  namespace: inlets
  labels:
    app: inlets
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inlets
  template:
    metadata:
      labels:
        app: inlets
    spec:
      containers:
      - name: inlets
        image: docker.cluster.fun/averagemarcus/inlets:3.0.3
        imagePullPolicy: IfNotPresent
        command: ["inlets"]
        args:
        - "server"
        - "--token-from=/var/inlets/token"
        volumeMounts:
          - name: inlets-token-volume
            mountPath: /var/inlets/
        resources:
          limits:
            memory: 50Mi
          requests:
            memory: 50Mi
      volumes:
        - name: inlets-token-volume
          secret:
            secretName: inlets
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: inlets
  namespace: inlets
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
spec:
  tls:
  - hosts:
    - inlets.cluster.fun
    secretName: inlets-ingress
  rules:
  - host: inlets.cluster.fun
    http:
      paths:
      - path: /
        backend:
          serviceName: inlets
          servicePort: 80
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: home-assistant
  namespace: inlets
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  tls:
  - hosts:
    - home.cluster.fun
    secretName: home-assistant-ingress
  rules:
  - host: home.cluster.fun
    http:
      paths:
      - path: /
        backend:
          serviceName: inlets
          servicePort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: downloads-rpc
  namespace: inlets
  labels:
    app: inlets
spec:
  type: ClusterIP
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8000
  selector:
    app: inlets
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: vpn-check
  namespace: inlets
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  tls:
  - hosts:
    - vpn-check.cluster.fun
    secretName: vpn-check-ingress
  rules:
  - host: vpn-check.cluster.fun
    http:
      paths:
      - path: /
        backend:
          serviceName: inlets
          servicePort: 80
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: adguard
  namespace: inlets
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  tls:
  - hosts:
    - adguard.cluster.fun
    secretName: adguard-ingress
  rules:
  - host: adguard.cluster.fun
    http:
      paths:
      - path: /
        backend:
          serviceName: inlets
          servicePort: 80

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: podify
  namespace: inlets
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  tls:
  - hosts:
    - podify.cluster.fun
    secretName: podify-ingress
  rules:
  - host: podify.cluster.fun
    http:
      paths:
      - path: /
        backend:
          serviceName: inlets
          servicePort: 80

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: photos
  namespace: inlets
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  tls:
  - hosts:
    - photos.cluster.fun
    secretName: photos-ingress
  rules:
  - host: photos.cluster.fun
    http:
      paths:
      - path: /
        backend:
          serviceName: inlets
          servicePort: 80

---
kind: Service
apiVersion: v1
metadata:
  name: loki
  namespace: inlets
spec:
  type: ClusterIP
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8000
  selector:
    app: inlets
---
